/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ERC20Staking,
  ERC20StakingInterface,
} from "../../contracts/ERC20Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stakingAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_ERC20Token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "validatorAddress",
            type: "string",
          },
          {
            internalType: "string",
            name: "chainSymbol",
            type: "string",
          },
        ],
        indexed: false,
        internalType: "struct Chain[]",
        name: "chains",
        type: "tuple[]",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    inputs: [],
    name: "ERC20Token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "validatorAddress",
            type: "string",
          },
          {
            internalType: "string",
            name: "chainSymbol",
            type: "string",
          },
        ],
        internalType: "struct Chain[]",
        name: "chains",
        type: "tuple[]",
      },
    ],
    name: "stakeERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakingBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007e57601f61054638819003918201601f19168301916001600160401b0383118484101761008357808492604094855283398101031261007e5780516020909101516001600160a01b038116919082900361007e57600055600180546001600160a01b0319169190911790556040516104ac908161009a8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816361b8b5dc1461036b57508063739a3e021461034e5780637a80760e1461032157637ca41e371461005057600080fd5b3461031d57602091826003193601126103195780359167ffffffffffffffff938484116103155736602385011215610315578383013593602490868611610303578560051b968451966100a5858a01896103a2565b875283870190838299840101923684116102ff57848101925b848410610270575050505050338752600282528287205461023657600193878360018060a01b0387541660648354885194859384926323b872dd60e01b84523389850152308a85015260448401525af1801561022c576101f1575b50875491338952600284528489209182549384018094116101e057505093929355855490835194848601928652848287015251809252606085019360608360051b870101969488915b8483106101945789337fed4d349ec4420f8cb25dff92793d712c83b1db3d123992f71f3debe0c5b95e838a8c038ba280f35b909192939484806101cf83999b605f198c82030187528c5190836101bf835189845289840190610436565b9201519084818403910152610436565b9a0193019301919594939290610162565b634e487b7160e01b8a526011905288fd5b8381813d8311610225575b61020681836103a2565b8101031261022157518015150361021d5738610119565b8780fd5b8880fd5b503d6101fc565b85513d8b823e3d90fd5b915162461bcd60e51b81529283015260179082015276596f752063616e206f6e6c79207374616b65206f6e636560481b6044820152606490fd5b83358381116102fb5782018860231982360301126102fb57885191898301838110868211176102e9578a52878201358581116102e5576102b5908936918501016103da565b83526044820135928584116102e5576102d68a94938a8695369201016103da565b838201528152019301926100be565b8e80fd5b634e487b7160e01b8f5260418c52888ffd5b8c80fd5b8a80fd5b50634e487b7160e01b87526041845286fd5b8580fd5b8380fd5b8280fd5b83823461034a578160031936011261034a5760015490516001600160a01b039091168152602090f35b5080fd5b83823461034a578160031936011261034a57602091549051908152f35b9290503461031957602036600319011261031957356001600160a01b03811690819003610319579260209381526002845220548152f35b90601f8019910116810190811067ffffffffffffffff8211176103c457604052565b634e487b7160e01b600052604160045260246000fd5b81601f820112156104315780359067ffffffffffffffff82116103c4576040519261040f601f8401601f1916602001856103a2565b8284526020838301011161043157816000926020809301838601378301015290565b600080fd5b919082519283825260005b848110610462575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161044156fea2646970667358221220fa99ffb3ef60db58541644a7ca0a4c8b5ee4fa5acf53191660bfa0a2d8394f4864736f6c63430008150033";

type ERC20StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Staking__factory extends ContractFactory {
  constructor(...args: ERC20StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _stakingAmount: BigNumberish,
    _ERC20Token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _stakingAmount,
      _ERC20Token,
      overrides || {}
    );
  }
  override deploy(
    _stakingAmount: BigNumberish,
    _ERC20Token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _stakingAmount,
      _ERC20Token,
      overrides || {}
    ) as Promise<
      ERC20Staking & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Staking__factory {
    return super.connect(runner) as ERC20Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20StakingInterface {
    return new Interface(_abi) as ERC20StakingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20Staking {
    return new Contract(address, _abi, runner) as unknown as ERC20Staking;
  }
}
