import { getLockEventDecodedLog } from '@src/modules/validator/components/nftLockListener/components/evmLockListener/utils';
import { expect } from 'chai';

describe('getLockEventDecodedLog', () => {
    const testCases = [
        {
            description: 'should decode a Lock event log correctly',
            log: {
                data: '0x000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000bd9592ce5d639cd0a50b03bf024cbcad81dc91250000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000034253430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783637303831624438353665323964374437423330323843333441666233333166613662333138364500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000873696e67756c617200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000',
                topics: [],
            },
            expectedDecodedLog: {
                tokenId: '69',
                destinationChain: 'BSC',
                destinationUserAddress:
                    '0x67081bD856e29d7D7B3028C34Afb331fa6b3186E',
                sourceNftContractAddress:
                    '0xbd9592cE5D639cD0A50b03Bf024CBCAd81dC9125',
                tokenAmount: '1',
                nftType: 'singular',
                sourceChain: 'ETH',
            },
        },
    ];

    testCases.forEach(({ description, log, expectedDecodedLog }) => {
        it(description, () => {
            const decodedLog = getLockEventDecodedLog({ log });
            expect(decodedLog).to.deep.equal(expectedDecodedLog);
        });
    });
});
